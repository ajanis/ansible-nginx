---

- name: "[NGINX] :: create public_html directory"
  file:
    path: "{{ nginx_default_docroot }}"
    state: directory
    mode: 0755
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
  notify:
    - restart nginx

- name: "[NGINX] :: Install SSL Key"
  copy:
    content: "{{ item.ssl_privkey }}"
    dest: "{{ item.ssl_keypath }}"
    owner: root
    group: root
    mode: 0640
  with_items: "{{ nginx_vhosts_ssl }}"
  notify:
    - restart nginx

- name: "[NGINX] :: Install SSL Certificate Chain"
  copy:
    content: "{{ item.ssl_certchain }}"
    dest: "{{ item.ssl_certpath }}"
    owner: root
    group: root
    mode: 0640
  with_items: "{{ nginx_vhosts_ssl }}"
  notify:
    - restart nginx

- name: "[NGINX] :: Remove default vhost configs"
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ nginx_default_site }}"
  notify:
    - restart nginx

- name: "[NGINX] :: Build nginx.conf template"
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
  notify:
    - restart nginx

- name: "[NGINX] :: Build NGINX vhost proxy template"
  template:
    src: proxy.conf.j2
    dest: /etc/nginx/proxy.conf
  notify:
    - restart nginx

- name: "[NGINX] :: Build NGINX vhost proxy-cache template"
  template:
    src: proxy-cache.conf.j2
    dest: /etc/nginx/proxy-cache.conf
  notify:
    - restart nginx

- name: "[NGINX] :: Build ssl.conf template"
  template:
    src: ssl.conf.j2
    dest: /etc/nginx/ssl.conf
  notify:
    - restart nginx

- name: "[NGINX] :: Build NGINX Backend template"
  template:
    src: upstream.conf.j2
    dest: "{{ nginx_cfg_dir }}/upstream.conf"
  notify:
    - restart nginx

- name: "[NGINX] :: Build NGINX Cache template"
  template:
    src: cache.conf.j2
    dest: "{{ nginx_cfg_dir }}/cache.conf"
  notify:
    - restart nginx

- name: "[NGINX] :: Build NGINX vhost template"
  template:
    src: default.conf.j2
    dest: "{{ nginx_cfg_dir }}/{{ www_domain }}"
  notify:
    - restart nginx

- name: "[NGINX] :: Build NGINX SSL vhost template"
  template:
    src: default-ssl.conf.j2
    dest: "{{ nginx_cfg_dir }}/{{ www_domain }}-ssl"
  notify:
    - restart nginx

- meta: flush_handlers

- name: Restart the nginx service
  systemd:
    name: nginx
    state: restarted
    enabled: yes
  register: nginx_restarted
  when: nginx_require_restart

- name: Verify the nginx service is listening
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: "{{ nginx_http_listen }}"
    delay: 5
  when: nginx_restarted is changed
  ignore_errors: yes
  register: nginx_start_attempt

- name: Get nginx journald logs if service does not appear to be up
  shell: journalctl _SYSTEMD_INVOCATION_ID=`systemctl show -p InvocationID --value nginx.service`
  register: nginx_journal
  when: nginx_start_attempt.failed is defined and nginx_start_attempt.failed == True

- fail:
    msg: "{{ nginx_journal.stdout_lines }}"
  when: nginx_start_attempt.failed is defined and nginx_start_attempt.failed == True
