---
- name: Slurp ssl data from remote host
  block:
    - name: identify latest ssl directory
      shell:
        cmd: ls -ltr "{{ ssl_certgen_directory }}" | tail -n1 | awk '{print $NF}'
      register: ssl_dir
      delegate_to: "{{ ssl_slurp_remote_host }}"
      delegate_facts: true

    - name: set ssl generated file directory as fact for later processing
      set_fact:
        ssl_slurp_directory: "{{ ssl_dir.stdout }}"

    - name: print ssl generated file path for debugging
      debug:
        msg: "{{ ssl_slurp_directory }}"
        verbosity: 1

    - name: slurp ssl key contents
      slurp:
        src: "{{ ssl_keygen_directory }}/{{ ssl_slurp_directory }}/private.key"
      register: ssl_key_contents
      delegate_to: "{{ ssl_slurp_remote_host }}"
      delegate_facts: true

    - name: set encoded ssl key contents as fact for later processing
      set_fact:
        encoded_ssl_key: "{{ ssl_key_contents['content'] }}"

    - name: slurp ssl certificate chain contents
      slurp:
        src: "{{ ssl_certgen_directory }}/{{ ssl_slurp_directory }}/fullchain.pem"
      register: ssl_cert_contents
      delegate_to: "{{ ssl_slurp_remote_host }}"
      delegate_facts: true

    - name: set encoded ssl cert contents as fact for later processing
      set_fact:
        encoded_ssl_cert: "{{ ssl_cert_contents['content'] }}"

    - name: set decoded ssl key and cert chain as fact for future tasks
      set_fact:
        ssl_privkey: "{{ encoded_ssl_key | b64decode }}"
        ssl_certchain: "{{ encoded_ssl_cert | b64decode }}"

    - name: print decoded ssl key and certificate chain for debugging
      debug:
        msg: |
          SSL private key: {{ ssl_privkey }}
          SSL certificate chain: {{ ssl_certchain }}
        verbosity: 1
#      no_log: True

    - name: "Ensure mounted ssl directory exists"
      file:
        path: "{{ data_mount_root }}/ssl/"
        state: directory
        mode: 0640
        owner: "{{ media_user_uid }}"
        group: "{{ media_user_gid }}"

    - name: "Install SSL Key to mounted ssl directory for other applications to use"
      copy:
        content: "{{ ssl_privkey }}"
        dest: "{{ data_mount_root }}/ssl/{{ www_domain }}.key"
        owner: "{{ media_user_uid }}"
        group: "{{ media_user_gid }}"
        mode: 0600

    - name: "Install SSL Certificate Chain to mounted ssl directory for other applications to use"
      copy:
        content: "{{ ssl_certchain }}"
        dest: "{{ data_mount_root }}/ssl/{{ www_domain }}.cert"
        owner: "{{ media_user_uid }}"
        group: "{{ media_user_gid }}"
        mode: 0640
  when:
    - slurp_ssl_keys_from_remote|default(False)
    - ssl_slurp_remote_host is defined
    - ssl_slurp_remote_host != None
  tags:
    - nginx-ssl-slurp

- name: Configure nginx directories and certificates
  block:
    - name: "Ensure public_html directory exist"
      file:
        path: "{{ nginx_default_docroot }}"
        state: directory
        mode: 0755
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"

    - name: "Ensure SSL Cert directory exists"
      file:
        path: "{{ item|dirname }}"
        state: directory
        mode: 0755
        owner: "root"
        group: "root"
      loop: "{{ nginx_vhosts_ssl|map(attribute='ssl_certpath') | list | unique }}"
      loop_control:
        label: "{{ item|dirname }}"

    - name: "Ensure SSL Key directory exists"
      file:
        path: "{{ item|dirname }}"
        state: directory
        mode: 0640
        owner: "root"
        group: "root"
      loop: "{{ nginx_vhosts_ssl|map(attribute='ssl_keypath') | list | unique }}"
      loop_control:
        label: "{{ item|dirname }}"

    - name: "Install SSL Keys for all vhosts"
      copy:
        content: "{{ item.ssl_privkey }}"
        dest: "{{ item.ssl_keypath }}"
        owner: root
        group: root
        mode: 0640
      loop: "{{ nginx_vhosts_ssl }}"
      loop_control:
        label: "{{ item.ssl_keypath }}"
      notify: "restart_nginx"

    - name: "Install SSL Certificate Chains for all vhosts"
      copy:
        content: "{{ item.ssl_certchain }}"
        dest: "{{ item.ssl_certpath }}"
        owner: root
        group: root
        mode: 0640
      loop: "{{ nginx_vhosts_ssl }}"
      loop_control:
        label: "{{ item.ssl_certpath }}"
      notify: "restart_nginx"

    - name: "Remove default vhost configs"
      file:
        path: "{{ item }}"
        state: absent
      loop: "{{ nginx_default_site }}"


    - name: "Build nginx.conf template"
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/nginx.conf
      notify: "restart_nginx"

    - name: "Build NGINX vhost proxy template"
      template:
        src: proxy.conf.j2
        dest: /etc/nginx/proxy.conf
      notify: "restart_nginx"

    - name: "Build NGINX vhost proxy-cache template"
      template:
        src: proxy-cache.conf.j2
        dest: /etc/nginx/proxy-cache.conf
      notify: "restart_nginx"

    - name: "Build ssl.conf template"
      template:
        src: ssl.conf.j2
        dest: /etc/nginx/ssl.conf
      notify: "restart_nginx"

    - name: "Build NGINX Backend template"
      template:
        src: upstream.conf.j2
        dest: "{{ nginx_cfg_dir }}/upstream.conf"
      notify: "restart_nginx"

    - name: "Build NGINX Cache template"
      template:
        src: cache.conf.j2
        dest: "{{ nginx_cfg_dir }}/cache.conf"
      notify: "restart_nginx"

    - name: "Build NGINX vhost template"
      template:
        src: default.conf.j2
        dest: "{{ nginx_cfg_dir }}/{{ www_domain }}"
      notify: "restart_nginx"

    - name: "Build NGINX SSL vhost template"
      template:
        src: default-ssl.conf.j2
        dest: "{{ nginx_cfg_dir }}/{{ www_domain }}-ssl"
      notify: "restart_nginx"
  tags:
    - nginx-vhost-config

- meta: flush_handlers

- name: Restart the nginx service if any configuration files have changed
  systemd:
    name: nginx
    state: |-
      {%- if nginx_require_restart|default(False) -%}
      restarted
      {%- else -%}
      started
      {%- endif -%}
    enabled: yes
    daemon_reload: yes
  register: nginx_restarted
  ignore_errors: yes

- name: Verify the nginx service is listening
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: "{{ nginx_http_listen }}"
    delay: 5
    timeout: 30
  ignore_errors: yes
  register: nginx_start_attempt

- name: Get nginx journald logs if service does not appear to be up
  shell: journalctl _SYSTEMD_INVOCATION_ID=`systemctl show -p InvocationID --value nginx.service`
  register: nginx_journal
  when:
    - nginx_start_attempt.failed | default(false)
- debug:
    msg: "{{ nginx_journal.stdout_lines }}"
  when:
    - nginx_start_attempt.failed | default(false)
  failed_when: nginx_start_attempt.failed
