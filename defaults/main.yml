---
slurp_ssl_keys_from_remote: false
ssl_slurp_remote_host:
ssl_cert_slurp_path:
ssl_key_slurp_path:
ssl_cert:
ssl_key:


nginx_index:
  - 'index.php'
  - 'index.html'
  - 'index.htm'
nginx_server_tokens: "off"
nginx_sendfile: "on"
nginx_tcp_nopush: "on"
nginx_default_type: "application/octet-stream"

nginx_gzip: "on"
nginx_gzip_vary: "on"
nginx_gzip_disable: "MSIE [1-6]."
nginx_gzip_proxied: any
nginx_gzip_http_version: "1.0"
nginx_gzip_min_length: "1000"
nginx_gzip_comp_level: "6"
nginx_gzip_buffers: "32 8k"

nginx_access_log: "/var/log/nginx/access.log  main"

nginx_log_format_main: |
    log_format main escape=json '{'
        '"time_local":"$time_local",'
        '"remote_addr": "$remote_addr",'                            # client IP
        '"request":"$request",'                                     # full path no arguments if the request
        '"status": "$status",'                                      # response status code
        '"request_time":"$request_time",'                           # request processing time in seconds with msec resolution
        '"remote_user": "$remote_user",'                            # client HTTP username
        '"remote_port": "$remote_port",'                            # client port
        '"body_bytes_sent": "$body_bytes_sent",'                    # the number of body bytes exclude headers sent to a client
        '"bytes_sent": "$bytes_sent", '                             # the number of bytes sent to a client
        '"request_length": "$request_length", '                     # request length (including headers and body)
        '"connection_requests": "$connection_requests",'            # number of requests made in connection
        '"http_host": "$http_host", '                               # the request Host: header
        '"http_referrer":"$http_referer",'
        '"upstream": "$upstream_addr", '                            # upstream backend server for proxied requests
        '"upstream_connect_time": "$upstream_connect_time", '       # upstream handshake time incl. TLS
        '"upstream_header_time": "$upstream_header_time", '         # time spent receiving upstream headers
        '"upstream_response_time": "$upstream_response_time", '     # time spend receiving upstream body
        '"upstream_response_length": "$upstream_response_length", ' # upstream response length
        '"upstream_cache_status": "$upstream_cache_status", '       # cache HIT/MISS where applicable
        '"ssl_protocol": "$ssl_protocol", '                         # TLS protocol
        '"ssl_cipher": "$ssl_cipher", '                             # TLS cipher
        '"scheme": "$scheme", '                                     # http or https
        '"http_user_agent":"$http_user_agent"'
    '}';


nginx_enable_rtmp: false
nginx_rtmp_listen_port: 1935
nginx_rtsp_transport_proto: tcp
nginx_rtsp_camera_feed: 'rtsp://camera_ip:7447/stream1'
nginx_hls_camera_feed_transcode_dir: /tmp/hls
nginx_hls_camera_transcode_index: "index.{{ nginx_hls_segment_list_type }}"
nginx_hls_camera_transcode_path: "{{ nginx_hls_camera_feed_transcode_dir }}/{{ nginx_hls_camera_transcode_index }}"
nginx_hls_segment_list_type: m3u8
nginx_hls_segment_format: mpegts
nginx_hls_segment_list_entry_prefix: /
nginx_fflags: |
  nobuffer -rtsp_transport tcp -i {{ nginx_rtsp_camera_feed }} \
  -vsync 0 -copyts -vcodec copy \
  -movflags frag_keyframe+empty_moov -an \
  -hls_flags delete_segments+append_list \
  -f segment -segment_list_flags live \
  -segment_time 1 -segment_list_size 3 -segment_format {{ nginx_hls_segment_format }} \
  -segment_list {{ nginx_hls_camera_transcode_path }} \
  -segment_list_type {{ nginx_hls_segment_list_type }} \
  -segment_list_entry_prefix {{ nginx_hls_segment_list_entry_prefix }} \
  {{ nginx_hls_camera_feed_transcode_dir }}/%d.ts > /var/log/ffmpeg 2>&1

nginx_rtmp_ffmpeg_command: "{{ nginx_ffmpeg_path }} -fflags {{ nginx_fflags }}"
nginx_ffmpeg_path: /usr/bin/ffmpeg
nginx_module_pkgs: []
nginx_modules_enabled: []
nginx_custom_css_theme: plex
nginx_worker_processes: "32"
nginx_worker_connections: "1024"
nginx_worker_rlimit_nofile: "409600"
nginx_server_names_hash_bucket_size: "1024"

nginx_extra_parameters:
nginx_proxy_temp_path: "/tmp/nginx-proxy-temp"
nginx_proxy_buffering: "on"
nginx_proxy_connect_timeout: "180s"
nginx_proxy_send_timeout: "180s"
nginx_proxy_read_timeout: "180s"
nginx_proxy_buffers: "32 32k"
nginx_proxy_buffer_size: "512k"
nginx_proxy_busy_buffers_size: "512k"
nginx_proxy_max_temp_file_size: "2048m"
nginx_proxy_temp_file_write_size: "1m"
nginx_client_body_buffer_size: "1m"
nginx_client_body_temp_path: "/tmp/nginx-client-body-temp"
nginx_client_body_timeout: "180s"
nginx_client_max_body_size: "0"
nginx_client_header_buffer_size: "4k"
nginx_client_header_timeout: "180s"

nginx_proxy_cache_enabled: true
nginx_proxy_cache: "nginx-cache"
nginx_proxy_cache_path: "/tmp/{{ nginx_proxy_cache }}"
nginx_proxy_cache_key: '$scheme$host$proxy_host$request_uri'
nginx_proxy_cache_size: "16m"
nginx_proxy_cache_max_size: "2048m"
nginx_proxy_cache_inactive: "1M"
nginx_proxy_cache_use_temp_path: "off"
nginx_proxy_cache_valid:
  - "200 302 1M"
  - "404 1m"
nginx_proxy_cache_min_uses: "1"
nginx_proxy_cache_background_update: "on"
nginx_proxy_cache_use_stale:
  - error
  - timeout
  - updating
  - http_500
  - http_502
  - http_503
  - http_504
nginx_proxy_cache_revalidate: "on"
nginx_proxy_cache_lock: "on"

nginx_fastcgi_read_timeout: "180s"
nginx_fastcgi_send_timeout: "180s"
nginx_default_servername: "{{ ansible_fqdn }}"
nginx_default_docroot: "/usr/share/nginx/html"
nginx_http_listen: 80
nginx_https_listen: 443

nginx_keepalive: 32
nginx_keepalive_requests: 100
nginx_keepalive_timeout: "300s"


nginx_vhosts:
  - servername: 127.0.0.1;
    serverlisten: 80;
    locations:
      - name: /nginx_status
        extra_parameters: |
          stub_status;
          access_log off;
          allow 127.0.0.1;
          deny all;
  - servername: "home.example.com"
    serveralias: "example.com www.home.example.com {{ ansible_eth0.ipv4.address }}"
    serverlisten: "80 default_server"
    locations:
      - name: /
        docroot: "{{ data_mount_root }}/{{ www_directory }}"

nginx_vhosts_ssl: []
#  - servername: "home.example.com"
#    serveralias: "example.com www.example.com www.home.example.com"
#    serverlisten: "443 default_server"
#    ssl_certchain: "{{ ssl_certchain }}"
#    ssl_privkey: "{{ ssl_privkey }}"
#    ssl_certpath: "{{ ssl_certpath }}"
#    ssl_keypath: "{{ ssl_keypath }}"
#    locations:
#      - name: /
#        docroot: "{{ data_mount_root }}/{{ www_directory }}"


nginx_allowed_ports:
  - "80/tcp"
  - "443/tcp"
  - "8080/tcp"
  - "8443/tcp"
  - "22/tcp"

nginx_symlinks: []

fail2ban_enable: false

fail2ban_loglevel: INFO
fail2ban_logtarget: SYSLOG
fail2ban_syslog_target: /var/log/fail2ban.log
fail2ban_syslog_facility: 1
fail2ban_socket: /var/run/fail2ban/fail2ban.sock
fail2ban_pidfile: /var/run/fail2ban/fail2ban.pid
fail2ban_sendername: 'Fail2ban'
fail2ban_ignoreips:
  - <network_address>/<cidr_prefix>
  - <network_address>/<cidr_prefix>
  - <network_address>/<cidr_prefix>
fail2ban_bantime: 1h
fail2ban_maxretry: 3
fail2ban_findtime: 5m
fail2ban_backend: auto
fail2ban_usedns: "warn"
fail2ban_destemail: root@localhost

fail2ban_banaction: iptables-multiport
# fail2ban_banaction: pfsense
# fail2ban_banaction: urltable

# Custom PFSense pfSSH Ban Action

# Set these variables if using pfsense Ban Action
# fail2ban_pfsense_ip:
# fail2ban_pfsense_user:
# fail2ban_ssh_private_key:

# Custom PFSense URLTable Ban Action
# fail2ban_banaction: urltable

# Set these variables if using URLTable Ban Action
# fail2ban_pfsense_ip:
# fail2ban_pfsense_user:
# fail2ban_ssh_private_key:
# fail2ban_urltable_file:

fail2ban_mta: sendmail
fail2ban_protocol: tcp
fail2ban_chain: '<known/chain>'
fail2ban_action: '%(action_)s'
fail2ban_services:
  - name: nginx-http-auth
    enabled: true
    filter: nginx-http-auth
    port: http,https
    logpath: /var/log/nginx/*.log
  - name: nginx-noscript
    enabled: true
    filter: nginx-noscript
    port: http,https
    logpath: /var/log/nginx/*.log
  - name: nginx-badbots
    enabled: true
    filter: nginx-badbots
    port: http,https
    logpath: /var/log/nginx/*.log
  - name: nginx-botsearch
    enabled: true
    filter: nginx-botsearch
    port: http,https
    logpath: /var/log/nginx/*.log
  - name: nginx-nohome
    enabled: true
    filter: nginx-nohome
    port: http,https
    logpath: /var/log/nginx/*.log
  - name: nginx-404
    enabled: true
    filter: nginx-404
    port: http,https
    logpath: /var/log/nginx/*.log
